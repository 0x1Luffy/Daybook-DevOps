name: CI/CD Daybook Project

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write  # required for SARIF uploads to Code Scanning

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: Install dependencies
        run: npm install

      # - name: Run tests
      #   run: npm test --if-present

      # Sonar analysis (SonarCloud or SonarQube Server)
      # For SonarCloud: set SONAR_TOKEN and project config (e.g., sonar-project.properties)
      # For SonarQube Server: also set SONAR_HOST_URL
      - name: Sonar Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}  # uncomment for self-hosted SonarQube

      # Cache Trivy DB to speed up scans on hosted runners
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      # Trivy filesystem scan (vuln + misconfig + secrets) -> SARIF
      - name: Trivy FS Scan (SARIF)
        uses: aquasecurity/trivy-action@v0.33.1
        with:
          scan-type: fs
          scan-ref: .
          scanners: vuln,misconfig,secret
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: sarif
          output: trivy-fs.sarif
          exit-code: 0

      - name: Upload FS SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      # Build images with unique tags
      - name: Build backend image
        run: docker build -t daybook-backend:${{ github.sha }} ./backend

      - name: Build frontend image
        run: docker build -t daybook-frontend:${{ github.sha }} ./frontend

      # Trivy image scans -> SARIF
      - name: Trivy Scan Backend (SARIF)
        uses: aquasecurity/trivy-action@v0.33.1
        with:
          scan-type: image
          image-ref: daybook-backend:${{ github.sha }}
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: sarif
          output: trivy-backend.sarif
          exit-code: 0

      - name: Upload Backend SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-backend.sarif

      - name: Trivy Scan Frontend (SARIF)
        uses: aquasecurity/trivy-action@v0.33.1
        with:
          scan-type: image
          image-ref: daybook-frontend:${{ github.sha }}
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: sarif
          output: trivy-frontend.sarif
          exit-code: 0

      - name: Upload Frontend SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-frontend.sarif

      # Save SARIF artifacts as well (optional)
      - name: Upload Trivy Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sarif-reports
          path: |
            trivy-fs.sarif
            trivy-backend.sarif
            trivy-frontend.sarif

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push backend image
        run: |
          docker tag daybook-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/daybook-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/daybook-backend:latest

      - name: Push frontend image
        run: |
          docker tag daybook-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/daybook-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/daybook-frontend:latest
