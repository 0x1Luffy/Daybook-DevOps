name: CI/CD Daybook Project

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'" 
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1️⃣ Checkout repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Set up Node.js for frontend and backend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      # 3️⃣ Build backend Docker image
      - name: Build backend image
        run: |
          docker build -t daybook-backend ./backend

      # 4️⃣ Build frontend Docker image
      - name: Build frontend image
        run: |
          docker build -t daybook-frontend ./frontend

      # 6️⃣ Push images to Docker Hub (optional)
      # Make sure to add DOCKER_USERNAME and DOCKER_PASSWORD as GitHub secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push backend image
        run: docker tag daybook-backend ${{ secrets.DOCKER_USERNAME }}/daybook-backend:latest && docker push ${{ secrets.DOCKER_USERNAME }}/daybook-backend:latest

      - name: Push frontend image
        run: docker tag daybook-frontend ${{ secrets.DOCKER_USERNAME }}/daybook-frontend:latest && docker push ${{ secrets.DOCKER_USERNAME }}/daybook-frontend:latest

      # 7️⃣ Deploy (optional, example for server with SSH)
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /path/to/deploy/folder
            docker-compose pull
            docker-compose up -d --build
