name: CI/CD Daybook Project

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write  # needed to upload SARIF to Security tab

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1Ô∏è‚É£ Checkout repo (full history improves Sonar PR analysis)
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: npm install

      # 4Ô∏è‚É£ (Optional) Run tests
      # - name: Run tests
      #   run: npm test --if-present

      # 5Ô∏è‚É£ Sonar analysis (SonarQube Server or SonarQube Cloud)
      # For SonarCloud, set SONAR_TOKEN and ensure sonar-project.properties has sonar.projectKey and sonar.organization.
      # Omit SONAR_HOST_URL for SonarCloud; set SONAR_HOST_URL for SonarQube Server.
      - name: Sonar Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          # SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}   # uncomment only for self-hosted SonarQube

      # 6Ô∏è‚É£ Cache Trivy DB to speed up scans on hosted runners
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      # 7Ô∏è‚É£ Pre-build Trivy scan (filesystem + deps + misconfig + secrets)
      - name: Trivy FS Scan (SARIF)
        uses: aquasecurity/trivy-action@v0.32.0
        with:
          scan-type: fs
          scan-ref: .
          scanners: vuln,misconfig,secret
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: sarif
          output: trivy-fs.sarif
          exit-code: 0  # don't fail the pipeline here; gate later if desired

      - name: Upload FS SARIF to Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      # 8Ô∏è‚É£ Build backend Docker image
      - name: Build backend image
        run: docker build -t daybook-backend:${{ github.sha }} ./backend

      # 9Ô∏è‚É£ Build frontend Docker image
      - name: Build frontend image
        run: docker build -t daybook-frontend:${{ github.sha }} ./frontend

      # üîü Trivy Scan (backend image)
      - name: Trivy Scan Backend (SARIF)
        uses: aquasecurity/trivy-action@v0.32.0
        with:
          scan-type: image
          image-ref: daybook-backend:${{ github.sha }}
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: sarif
          output: trivy-backend.sarif
          exit-code: 0

      - name: Upload Backend SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-backend.sarif

      # 1Ô∏è‚É£1Ô∏è‚É£ Trivy Scan (frontend image)
      - name: Trivy Scan Frontend (SARIF)
        uses: aquasecurity/trivy-action@v0.32.0
        with:
          scan-type: image
          image-ref: daybook-frontend:${{ github.sha }}
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          format: sarif
          output: trivy-frontend.sarif
          exit-code: 0

      - name: Upload Frontend SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-frontend.sarif

      # 1Ô∏è‚É£2Ô∏è‚É£ Also save human-readable Trivy reports
      - name: Export Trivy table reports
        run: |
          trivy --version || true
          # Re-run format conversion from SARIF to table for artifacts (optional)
          # Alternatively re-run scans with format=table if artifact needs exact CLI table output.
          echo "FS, Backend, and Frontend SARIF are uploaded to Security tab; table artifacts are optional."

      - name: Upload Trivy Reports as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-fs.sarif
            trivy-backend.sarif
            trivy-frontend.sarif

      # 1Ô∏è‚É£3Ô∏è‚É£ Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 1Ô∏è‚É£4Ô∏è‚É£ Push backend image
      - name: Push backend image
        run: |
          docker tag daybook-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/daybook-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/daybook-backend:latest

      # 1Ô∏è‚É£5Ô∏è‚É£ Push frontend image
      - name: Push frontend image
        run: |
          docker tag daybook-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/daybook-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/daybook-frontend:latest
